<dataprocessing xsi:type="Workflow:DataProcessing"
                outgoing=""
                incoming=""
                in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.0"
                out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0"
                name="mapping({{ dataprocessing.mapping.replace_column_name }})"
                origin_function="{{ dataprocessing.transformation.KNIME_name }}">
    <dataProcessingDefinition
        xsi:type="Library:Transformation"
        href="library_validation.xmi#//@dataprocessingdefinition.4"/>
    {% for m_parameter in dataprocessing.mapping.mapping_parameters %}
    <parameter
        xsi:type="Workflow:Map"
        name="mapping({{ dataprocessing.mapping.replace_column_name }})_param_{{ m_parameter.key }}"
        mapOperation="{{ dataprocessing.mapping.map_operation }}"
        inValue="{{ m_parameter.key }}"
        outvalue="{{ m_parameter.value }}">
      <mapDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@parameterdefinition.0"/>
    </parameter>
    {% endfor %}
    {% if dataprocessing.include_contracts %}
    <contract
        name="mapping({{ dataprocessing.mapping.replace_column_name }})_PRECONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.1"/>
      <contract
          xsi:type="Contract:ValueRange"
          name="mapping({{ dataprocessing.mapping.replace_column_name }})_PRE_valueRange">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.0"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_PRE_input_datafield">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.1/@contractDefinition/@in.0"/>
        </in>
        {% for m_parameter in dataprocessing.mapping.mapping_parameters %}
        {% if dataprocessing.mapping.map_operation == "SUBSTRING" %}
        {% set subStr_val = "true" %}
        {% elif dataprocessing.mapping.map_operation == "VALUE_MAPPING" %}
        {% set subStr_val = "false" %}
        {% else %}
        {% set subStr_val = "false" %}
        {% endif %}
        <value
            xsi:type="Contract:FixValue"
            subStr="{{ subStr_val }}"
            value="{{ m_parameter.key }}">
          <fixValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.1/@contractDefinition/@valuedefinition.0"/>
        </value>
        {% endfor %}
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.1/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="mapping({{ dataprocessing.mapping.replace_column_name }})_POSTCONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.0"/>
      <contract
          xsi:type="Contract:ValueRange"
          type="POSTCONDITION"
          name="mapping({{ dataprocessing.mapping.replace_column_name }})_POST_valueRange"
          belongOp="NOTBELONG">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_POST_input_datafield">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.0/@contractDefinition/@in.0"/>
        </in>
        {% for m_parameter in dataprocessing.mapping.mapping_parameters %}
        {% if dataprocessing.mapping.map_operation == "SUBSTRING" %}
        {% set subStr_val = "true" %}
        {% elif dataprocessing.mapping.map_operation == "VALUE_MAPPING" %}
        {% set subStr_val = "false" %}
        {% else %}
        {% set subStr_val = "false" %}
        {% endif %}
        <value
            xsi:type="Contract:FixValue"
            subStr="{{ subStr_val }}"
            value="{{ m_parameter.key }}">
          <fixValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.0/@contractDefinition/@valuedefinition.0"/>
        </value>
        {% endfor %}
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.0/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="mapping({{ dataprocessing.mapping.replace_column_name }})_INVARIANT">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2"/>
      <contract
          xsi:type="Contract:Condition"
          type="INVARIANT"
          name="mapping({{ dataprocessing.mapping.replace_column_name }})_INV_condition">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.0"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_INV_input_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@in.0"/>
        </in>
        <out
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_INV_output_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@out.0"/>
        </out>
        <conditionDef
            href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition"/>
        {% for m_parameter in dataprocessing.mapping.mapping_parameters %}
          {% if dataprocessing.mapping.map_operation == "SUBSTRING" %}
        {% set subStr_val = "true" %}
        {% elif dataprocessing.mapping.map_operation == "VALUE_MAPPING" %}
        {% set subStr_val = "false" %}
        {% else %}
        {% set subStr_val = "false" %}
        {% endif %}
        <if
            then="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@then.{{ loop.index0 }}"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_INV_IF_{{ m_parameter.key }}">
          <ifDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@ifdefinition.0"/>
          <dataCondition
              xsi:type="Contract:FixValue"
              value="{{ m_parameter.key }}">
            <fixValueDef
                href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@ifdefinition.0/@dataCondition.0"/>
          </dataCondition>
        </if>
        <then
            if="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@if.{{ loop.index0 }}"
            name="mapping({{ dataprocessing.mapping.replace_column_name }})_INV_THEN_{{ m_parameter.key }}">
          <thenDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@thendefinition.0"/>
          <dataResult
              xsi:type="Contract:FixValue"
              subStr="{{ subStr_val }}"
              value="{{ m_parameter.value }}"
              dataType="String">
            <fixValueDef
                href="library_validation.xmi#//@dataprocessingdefinition.4/@contractdefinition.2/@contractDefinition/@thendefinition.0/@dataResult"/>
          </dataResult>
        </then>
        {% endfor %}
      </contract>
    </contract>
    {% endif %}
    <inputPort fileName="{{ dataprocessing.input_filepath }}"
               name="mapping({{ dataprocessing.mapping.replace_column_name }})_input_dataDictionary"
               out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0">
      <datafield
          xsi:type="Workflow:Categorical"
          name="mapping({{ dataprocessing.mapping.replace_column_name }})_input_dataField"
          displayName="{{ dataprocessing.mapping.replace_column_name }}"
          out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0">
        <categoricalDef
            href="library_validation.xmi#//@dataprocessingdefinition.4/@inputPort.0/@datafielddefinition.0"/>
      </datafield>
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@inputPort.0"/>
    </inputPort>
    <outputPort
        fileName="{{ dataprocessing.output_filepath }}"
        name="mapping({{ dataprocessing.mapping.replace_column_name }})_output_dataDictionary"
        in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0">
      <datafield
          xsi:type="Workflow:Categorical"
          name="mapping({{ dataprocessing.mapping.replace_column_name }})_output_dataField"
          displayName="{{ dataprocessing.mapping.replace_column_name }}"
          in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.0">
        <categoricalDef
            href="library_validation.xmi#//@dataprocessingdefinition.0/@outputPort.0/@datafielddefinition.0"/>
      </datafield>
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.4/@outputPort.0"/>
    </outputPort>
  </dataprocessing>
