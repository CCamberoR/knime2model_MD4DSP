<dataprocessing
      xsi:type="Workflow:DataProcessing"
      outgoing=""
      incoming=""
      in="{% for in_column in dataprocessing.in_columns %}//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ loop.index0 }} {% endfor %}"
      out="{% for out_column in dataprocessing.out_columns %}//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.{{ loop.index0 }} {% endfor %}"
      name="rowFilterMissing({{ dataprocessing.in_column_names }})"
      {% if dataprocessing.original_data_processing_index %}
      initial_accumulated_processing="//@dataprocessing.{{ dataprocessing.original_data_processing_index }}"
      {% endif %}
      origin_function="{{ dataprocessing.transformation.KNIME_name }}">
    <inputPort
        fileName="{{ dataprocessing.input_filepath }}"
        name="rowFilterMissing({{ dataprocessing.in_column_names }})_input_dataDictionary"
        out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0">
      {% for in_column in dataprocessing.in_columns %}
      <datafield
          xsi:type="Workflow:Continuous"
          name="rowFilterMissing({{ in_column.name }})_input_dataField"
          dataType="{{ in_column.type }}"
          displayName="{{ in_column.name }}">
        <continuousDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@inputPort.0/@datafielddefinition.0"/>
        <interval
            rightMargin="1.0"
            clousure="closedClosed"/>
      </datafield>
        {% endfor %}
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.10/@inputPort.0"/>
    </inputPort>
    <outputPort
        fileName="{{ dataprocessing.output_filepath }}"
        name="rowFilterMissing({{ dataprocessing.out_column_names }})_output_dataDictionary"
        in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0">
      {% for out_column in dataprocessing.out_columns %}
      <datafield
          xsi:type="Workflow:Continuous"
          name="rowFilterMissing({{ out_column.name }})_output_dataField"
          displayName="{{ out_column.name }}">
        <continuousDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@outputPort.0/@datafielddefinition.0"/>
        <interval
            rightMargin="1.0"
            clousure="closedClosed"/>
      </datafield>
        {% endfor %}
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.10/@outputPort.0"/>
    </outputPort>
    <dataProcessingDefinition
        xsi:type="Library:Transformation"
        href="library_validation.xmi#//@dataprocessingdefinition.10"/>
    <parameter
        xsi:type="Workflow:FilterValue"
        filterType="{{ dataprocessing.row_filter.filter_type_inclusion }}"
        name="rowFilterMissing({{ dataprocessing.in_column_names }})_param_rowFilter">
      <filterValueDef
          href="library_validation.xmi#//@dataprocessingdefinition.10/@parameterdefinition.0"/>
      <matchingvalue
          xsi:type="Workflow:SpecialValues"
          name="rowFilterMissing({{ dataprocessing.in_column_names }})_param_missing_values">
        <specialValuesDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@parameterdefinition.0/@matchingvaluedef.0"/>
      </matchingvalue>
    </parameter>
    {% for in_column in dataprocessing.in_columns %}
    {% if dataprocessing.include_contracts %}
    {% set in_index = loop.index0 %}
    {% set contract_index = dataprocessing.in_columns|length * loop.index0 + 2 %}
    <contract
        name="rowFilterMissing({{ in_column.name }})_PRECONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.0"/>
      <contract
          xsi:type="Contract:ValueRange"
          name="rowFilterMissing({{ in_column.name }})_PRE_valueRange"
          belongOp="BELONG">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ in_index }}"
            name="rowFilterMissing({{ in_column.name }})_PRE_input_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.0/@contractDefinition/@in.0"/>
        </in>
        <value
            xsi:type="Contract:SpecialValue">
            <quantity
              xsi:type="Contract:Percent"
              operator="less"
              percent="60.0">
            <percentDef
                href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.0/@contractDefinition/@valuedefinition.0/@quantitydef"/>
          </quantity>
          <specialValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.0/@contractDefinition/@valuedefinition.0"/>
        </value>
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.0/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="rowFilterMissing({{ in_column.name }})_POSTCONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.1"/>
      <contract
          xsi:type="Contract:ValueRange"
          name="rowFilterMissing({{ in_column.name }})_POST_valueRange"
          {% if dataprocessing.row_filter.filter_type_inclusion == 'EXCLUDE' %}
          belongOp="NOTBELONG">
          {% else %}
          belongOp="BELONG">
          {% endif %}
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.{{ in_index }}"
            name="rowFilterMissing({{ in_column.name }})_POST_input_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.1/@contractDefinition/@in.0"/>
        </in>
        <value
            xsi:type="Contract:SpecialValue">
          <specialValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.1/@contractDefinition/@valuedefinition.0"/>
        </value>
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.1/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="rowFilterMissing({{ in_column.name }})_INVARIANT">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2"/>
      <contract
          xsi:type="Contract:Condition"
          name="rowFilterMissing({{ in_column.name }})_INV_condition">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ in_index }}"
            name="rowFilterMissing({{ in_column.name }})_input_datafield">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@in.0"/>
        </in>
        <out
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.{{ in_index }}"
            name="rowFilterMissing({{ in_column.name }})_output_datafield">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@out.0"/>
        </out>
        <conditionDef
            href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition"/>
        <if
            then="//@dataprocessing.{{ dataprocessing.index }}/@contract.{{ contract_index }}/@contract/@then.0"
            name="rowFilterMissing({{ in_column.name }})_INV_IF">
          <ifDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@ifdefinition.0"/>
          <dataCondition
              xsi:type="Contract:Interval">
            <intervalDef
                href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@ifdefinition.0/@dataCondition.0"/>
          </dataCondition>
        </if>
        <then
            if="//@dataprocessing.{{ dataprocessing.index }}/@contract.{{ contract_index }}/@contract/@if.0"
            name="rowFilterMissing({{ in_column.name }})_INV_THEN"
            {% if dataprocessing.row_filter.filter_type_inclusion == 'EXCLUDE' %}
            belongOp="NOTBELONG">
            {% else %}
            belongOp="BELONG">
            {% endif %}
          <thenDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@thendefinition.0"/>
          <dataResult
              xsi:type="Contract:SpecialValue">
            <specialValueDef
                href="library_validation.xmi#//@dataprocessingdefinition.10/@contractdefinition.2/@contractDefinition/@thendefinition.0/@dataResult"/>
          </dataResult>
        </then>
      </contract>
    </contract>
    {% endif %}
    {% endfor %}
  </dataprocessing>
