<dataprocessing
      xsi:type="Workflow:DataProcessing"
      incoming=""
      outgoing=""
      in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0"
      out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0"
      name="mathOperation({{ dataprocessing.math_op.out_column }})">
    <inputPort
        fileName="{{ dataprocessing.input_filepath }}"
        name="mathOperation({{ dataprocessing.math_op.out_column }})_input_dataDictionary"
        out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0">
      {% for operand in dataprocessing.math_op.operands %}
      {% set next_operand_index = loop.index0 + 1 %}
      {% if operand.type == 'column' %}
      <datafield
          xsi:type="Workflow:Continuous"
          name="mathOperation({{ operand.value }})_input{{ next_operand_index }}_dataField"
          dataType="Double"
          displayName="{{ operand.value }}"
          out="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0">
        <continuousDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@inputPort.0/@datafielddefinition.0"/>
        <interval
            leftMargin="440.0"
            rightMargin="1600.0"
            clousure="closedClosed"/>
      </datafield>
      {% endif %}
      {% endfor %}
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.9/@inputPort.0"/>
    </inputPort>
    <outputPort
        fileName="{{ dataprocessing.output_filepath }}"
        name="mathOperation({{ dataprocessing.math_op.out_column }})_output_dataDictionary"
        in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0">
      <datafield
          xsi:type="Workflow:Continuous"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_output_dataField"
          dataType="Double"
          displayName="{{ dataprocessing.math_op.out_column }}"
          in="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.0">
        <continuousDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@outputPort.0/@datafielddefinition.0"/>
        <interval
            leftMargin="440.0"
            rightMargin="1600.0"
            clousure="closedClosed"/>
      </datafield>
      <dataDictionaryDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.9/@outputPort.0"/>
    </outputPort>
    <dataProcessingDefinition
        xsi:type="Library:Transformation"
        href="library_validation.xmi#//@dataprocessingdefinition.9"/>
    <parameter
        xsi:type="Workflow:DerivedField"
        name="mathOperation({{ dataprocessing.math_op.out_column }})_param_derivedField"
        der_dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0">
      <derivedFieldDef
          href="library_validation.xmi#//@dataprocessingdefinition.9/@parameterdefinition.0"/>
    </parameter>
    <parameter
        xsi:type="Workflow:MathOp"
        name="mathOperation({{ dataprocessing.math_op.out_column }})_param_mathop"
        operator="{{ dataprocessing.math_op.operator }}">

      {% set ns = namespace(field_counter=0) %}
      {% for operand in dataprocessing.math_op.operands %}
      {% set operand_index = loop.index0 %}
      {% set next_operand_index = loop.index0 + 1 %}
      {% set last_operand_index = dataprocessing.math_op.operands|length - 1 %}
      {% if operand.type == 'column' %}
      <operand
          xsi:type="Workflow:Field"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_param_op{{ next_operand_index }}_field"
          datafield="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ ns.field_counter }}"
          {% if operand_index == last_operand_index %}
          next_operand="">
          {% else %}
          next_operand="//@dataprocessing.{{ dataprocessing.index }}/@parameter.1/@operand.{{ next_operand_index }}">
          {% endif %}
        <fieldDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@parameterdefinition.1/@operandDef.1"/>

      {% set ns.field_counter = ns.field_counter + 1 %}
      </operand>
      {% elif operand.type == 'fixed_value' %}
      <operand
          xsi:type="Workflow:FixValue"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_param_op{{ next_operand_index }}_fix_value"
          {% if operand_index == last_operand_index %}
            next_operand="">
            {% else %}
            next_operand="//@dataprocessing.{{ dataprocessing.index }}/@parameter.1/@operand.{{ next_operand_index }}">
            {% endif %}
        <fixValueDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@parameterdefinition.1/@operandDef.0"/>
        <value
            name="mathOperation({{ dataprocessing.math_op.out_column }})_param_primitive"
            value="{{ operand.value }}"
            dataType="Double">
          <primitiveDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@parameterdefinition.1/@operandDef.0/@value"/>
        </value>
      </operand>
      {% endif %}
      {% endfor %}

      <mathOpDef
          href="library_validation.xmi#//@dataprocessingdefinition.9/@parameterdefinition.1"/>
    </parameter>
    <contract
        name="mathOperation({{ dataprocessing.math_op.out_column }})_PRECONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.0"/>
      <contract
          xsi:type="Contract:ValueRange"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_PRE_valueRange">
          {% set ns = namespace(field_counter=0) %}
          {% for operand in dataprocessing.math_op.operands %}
          {% set operand_index = loop.index0 %}
          {% set next_operand_index = loop.index0 + 1 %}
          {% set last_operand_index = dataprocessing.math_op.operands|length - 1 %}
          {% if operand.type == 'column' %}
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ ns.field_counter }}"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_PRE_input{{ next_operand_index }}_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.0/@contractDefinition/@in.0"/>
        </in>
          {% set ns.field_counter = ns.field_counter + 1 %}
          {% endif %}
          {% endfor %}
        <value
            xsi:type="Contract:SpecialValue">
          <specialValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.0/@contractDefinition/@valuedefinition.0"/>
        </value>
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.0/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="mathOperation({{ dataprocessing.math_op.out_column }})_POSTCONDITION">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.1"/>
      <contract
          xsi:type="Contract:ValueRange"
          type="POSTCONDITION"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_POST_valueRange"
          belongOp="BELONG">
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_POST_input_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.1/@contractDefinition/@in.0"/>
        </in>
        <value
            xsi:type="Contract:SpecialValue">
          <specialValueDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.1/@contractDefinition/@valuedefinition.0"/>
        </value>
        <valueRangeDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.1/@contractDefinition"/>
      </contract>
    </contract>
    <contract
        name="mathOperation({{ dataprocessing.math_op.out_column }})_INVARIANT">
      <contractDefinition
          href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2"/>
      <contract
          xsi:type="Contract:Condition"
          type="INVARIANT"
          name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_condition">
          {% set ns = namespace(field_counter=0) %}
          {% for operand in dataprocessing.math_op.operands %}
          {% set next_operand_index = loop.index0 + 1 %}
          {% if operand.type == 'column' %}
        <in
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@inputPort.0/@datafield.{{ ns.field_counter }}"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_input{{ next_operand_index }}_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@in.0"/>
        </in>
          {% set ns.field_counter = ns.field_counter + 1 %}
          {% endif %}
          {% endfor %}
        <out
            xsi:type="Contract:DataField"
            dataField="//@dataprocessing.{{ dataprocessing.index }}/@outputPort.0/@datafield.0"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_output_dataField">
          <dataFieldDef
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@out.0"/>
        </out>
        <conditionDef
            href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition"/>
        <if
            then="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@then.0"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_IF">
          <ifDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@ifdefinition.0"/>
          <dataCondition
              xsi:type="Contract:Interval"
              rightMargin="10.0">
            <intervalDef
                href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@ifdefinition.0/@dataCondition.0"/>
          </dataCondition>
        </if>
        <then
            if="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@if.0"
            name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_THEN">
          <thenDefinition
              href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@thendefinition.0"/>
          <dataResult
              xsi:type="Contract:MathOperation"
              mathOp="SUBSTRACT">

            {% set ns = namespace(field_counter=0) %}
            {% for operand in dataprocessing.math_op.operands %}
            {% set operand_index = loop.index0 %}
            {% set next_operand_index = loop.index0 + 1 %}
            {% set last_operand_index = dataprocessing.math_op.operands|length - 1 %}
            {% if operand.type == 'column' %}
            <operand
                xsi:type="Contract:OpField"
                name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_THEN_OP{{ next_operand_index }}_FIELD"
                datafield="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@in.{{ ns.field_counter }}"
                {% if operand_index == last_operand_index %}
                next_operand="">
                {% else %}
                next_operand="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@then.0/@dataResult/@operand.{{ next_operand_index }}">
                {% endif %}
              <opFieldDef
                  href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@thendefinition.0/@dataResult/@operanddef.1"/>
            </operand>
            {% set ns.field_counter = ns.field_counter + 1 %}
            {% elif operand.type == 'fixed_value' %}
            <operand
                xsi:type="Contract:FixValue"
                name="mathOperation({{ dataprocessing.math_op.out_column }})_INV_THEN_OP{{ next_operand_index }}_FIX_VALUE"
                {% if operand_index == last_operand_index %}
                next_operand="">
                {% else %}
                next_operand="//@dataprocessing.{{ dataprocessing.index }}/@contract.2/@contract/@then.0/@dataResult/@operand.{{ next_operand_index }}">
                {% endif %}
                value="{{ operand.value }}"
                dataType="Double">
                <fixValueDef
                  href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@thendefinition.0/@dataResult/@operanddef.0"/>
            </operand>
            {% endif %}
            {% endfor %}
          <mathOpDef
                href="library_validation.xmi#//@dataprocessingdefinition.9/@contractdefinition.2/@contractDefinition/@thendefinition.0/@dataResult"/>
          </dataResult>
        </then>
      </contract>
    </contract>
  </dataprocessing>
