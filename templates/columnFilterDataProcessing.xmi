<dataprocessing xsi:type="Workflow:DataProcessing" outgoing="" incoming="" in="" out="" name="columnFilter({{ dataprocessing.column_names }})">
    <inputPort fileName="columnFilter_output_dataDictionary.csv" name="columnFilter({{ dataprocessing.column_names }})_input_dataDictionary" out="">
      {% for in_column in dataprocessing.in_columns %}
  <datafield xsi:type="Workflow:Continuous"
             name="columnFilter({{ in_column.name }})_input_dataField"
             displayName="{{ in_column.name }}">
    <continuousDef href="library_validation.xmi#//@dataprocessingdefinition.3/@inputPort.0/@datafielddefinition.0"/>
      <interval leftMargin="0.0" rightMargin="100.0" clousure="closedClosed"/>
  </datafield>
       {% endfor %}
              {% for out_column in dataprocessing.out_columns %}
  <datafield xsi:type="Workflow:Continuous"
             name="columnFilter({{ out_column.name }})_input_dataField"
             displayName="{{ out_column.name }}">
    <continuousDef href="library_validation.xmi#//@dataprocessingdefinition.3/@inputPort.0/@datafielddefinition.0"/>
      <interval leftMargin="0.0" rightMargin="100.0" clousure="closedClosed"/>
  </datafield>
       {% endfor %}
      <dataDictionaryDefinition href="library_validation.xmi#//@dataprocessingdefinition.3/@inputPort.0"/>
    </inputPort>
    <outputPort fileName="columnFilter_output_dataDictionary.csv" name="columnFilter({{ dataprocessing.column_names }})_output_dataDictionary" in="">
        {% for out_column in dataprocessing.out_columns %}
        <datafield xsi:type="Workflow:Continuous"
             name="columnFilter({{ out_column.name }})_output_dataField"
             displayName="{{ out_column.name }}">
            <continuousDef
                 href="library_validation.xmi#//@dataprocessingdefinition.3/@outputPort.0/@datafielddefinition.0"/>
            <interval rightMargin="1.0" clousure="closedClosed"/>
        </datafield>
       {% endfor %}
      <dataDictionaryDefinition href="library_validation.xmi#//@dataprocessingdefinition.3/@outputPort.0"/>
    </outputPort>
    <dataProcessingDefinition xsi:type="Library:Transformation" href="library_validation.xmi#//@dataprocessingdefinition.3"/>
    <parameter xsi:type="Workflow:Field" name="columnFilter({{ dataprocessing.column_names }})_param_field"
               dataField="">
      <fieldDef href="library_validation.xmi#//@dataprocessingdefinition.3/@parameterdefinition.0"/>
    </parameter>
    <contract name="columnFilter({{ dataprocessing.column_names }})_PRECONDITION">
      <contractDefinition href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.0"/>
      <contract xsi:type="Contract:FieldRange" name="columnFilter({{ dataprocessing.column_names }})_PRE_fieldRange">
        <in xsi:type="Contract:DataDictionary" dataDictionary="">
          <dataDictionaryDef href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.0/@contractDefinition/@in.0"/>
        </in>
        <fieldRangeDef href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.0/@contractDefinition"/>
        {% for column in dataprocessing.in_columns %}
        <field dataField=""/>
        {% endfor %}
      </contract>
    </contract>
    <contract name="columnFilter({{ dataprocessing.column_names }})_POSTCONDITION">
      <contractDefinition href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.1"/>
      <contract xsi:type="Contract:FieldRange" type="POSTCONDITION" name="columnFilter({{ dataprocessing.ccolumn_names }})_POST_fieldRange" belongOp="NOTBELONG">
        <in xsi:type="Contract:DataDictionary" dataDictionary="">
          <dataDictionaryDef href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.1/@contractDefinition/@in.0"/>
        </in>
        <fieldRangeDef href="library_validation.xmi#//@dataprocessingdefinition.3/@contractdefinition.1/@contractDefinition"/>
        {% for column in dataprocessing.in_columns %}
        <field dataField=""/>
       {% endfor %}
      </contract>
    </contract>
  </dataprocessing>
